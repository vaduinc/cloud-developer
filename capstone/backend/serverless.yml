service:
  name: serverless-newsletter-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  topicName: attachTopic-${self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x

  tracing:
    lambda: true
    apiGateway: true

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NEWSLETTER_TABLE: Newsletter-${self:provider.stage}
    INDEX_NAME: GSI
    ATTACH_S3_BUCKET: serverless-jv-newsletter-attch-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NEWSLETTER_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NEWSLETTER_TABLE}/index/${self:provider.environment.INDEX_NAME}
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: arn:aws:s3:::${self:provider.environment.ATTACH_S3_BUCKET}/*
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
        - "ses:SendRawEmail"
      Resource:
        - "*"
      Condition:
        StringEquals:
          ses:FromAddress:
            - "jaime.vadu@gmail.com"

functions:
  GetNewsletters:
    handler: src/lambda/http/getNewsletters.handler
    events:
      - http:
          method: get
          path: newsletters
          cors: true

  CreateNewsletter:
    handler: src/lambda/http/createNewsletter.handler
    events:
      - http:
          method: post
          path: newsletters
          cors: true        

  GetUserProfile:
    handler: src/lambda/http/getUserProfile.handler
    events:
      - http:
          method: get
          path: userprofile
          cors: true

  UpdateUserProfile:
    handler: src/lambda/http/updateUserProfile.handler
    events:
      - http:
          method: post
          path: userprofile
          cors: true

  CreateSubscription:
    handler: src/lambda/http/createSubscription.handler
    events:
      - http:
          method: post
          path: newsletters/subscription
          cors: true

  GetUserSubscriptions:
    handler: src/lambda/http/getUserSubscriptions.handler
    events:
      - http:
          method: get
          path: newsletters/subscription
          cors: true

  GetSubscriptionsByNewsletterId:
    handler: src/lambda/http/getSubscriptionsByNewsletterId.handler
    events:
      - http:
          method: get
          path: newsletters/{newsletterId}/subscription
          cors: true

  GetUserPublications:
    handler: src/lambda/http/getUserPublications.handler
    events:
      - http:
          method: get
          path: newsletters/publication
          cors: true

  GetPublication:
    handler: src/lambda/http/getPublication.handler
    events:
      - http:
          method: get
          path: newsletters/{newsletterId}/publication/{publicationId}
          cors: true

  PublishNewsletter:
    handler: src/lambda/http/publishNewsletter.handler
    events:
      - http:
          method: post
          path: newsletters/publication
          cors: true

  SendUploadNotifications:
    handler: src/lambda/s3/sendNotifications.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}

resources:
  Resources:
    NewsletterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI
            AttributeType: S  
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.NEWSLETTER_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: GSI
                KeyType: HASH
              - AttributeName: SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACH_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref AttachmentTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACH_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    AttachmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Newsletter topic
        TopicName: ${self:custom.topicName}

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref AttachmentTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.ATTACH_S3_BUCKET}
        Topics:
          - !Ref AttachmentTopic