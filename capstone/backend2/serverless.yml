service:
  name: serverless-newsletter-app

plugins:
  - serverless-webpack
  # - serverless-reqvalidator-plugin
  # - serverless-aws-documentation
  # - serverless-iam-roles-per-function

provider:

  name: aws
  runtime: nodejs10.x

  tracing:
    lambda: true
    apiGateway: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    NEWSLETTER_TABLE: Newsletter-${self:provider.stage}
    INDEX_NAME: GSI
    ATTACH_S3_BUCKET: serverless-jv-newsletter-attch-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

# custom:
#   documentation:
#     api:
#       info:
#         version: v1.0.0
#         title: Newsletter API
#         description: Serverless application for Newsletter
#     models:
#       - name: CreateTodoRequest
#         contentType: application/json
#         schema: ${file(models/create-todo-request.json)}
#       - name: UpdateTodoRequest
#         contentType: application/json
#         schema: ${file(models/update-todo-request.json)}

# functions:

  # Auth:
  #   handler: src/lambda/auth/auth0Authorizer.handler
  #   iamRoleStatements:  
  #     - Effect: Allow
  #       Action:
  #         - xray:PutTraceSegments
  #         - xray:PutTelemetryRecords
  #       Resource:
  #         - "*"

  # GetTodos:
  #   handler: src/lambda/http/getTodos.handler
  #   events:
  #     - http:
  #         method: get
  #         path: todos
  #         cors: true
  #         authorizer: Auth
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:Query
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NEWSLETTER_TABLE}
  #     - Effect: Allow
  #       Action:
  #         - xray:PutTraceSegments
  #         - xray:PutTelemetryRecords
  #       Resource:
  #         - "*"

  # CreateTodo:
  #   handler: src/lambda/http/createTodo.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos
  #         cors: true
  #         authorizer: Auth
  #         reqValidatorName: RequestBodyValidator
  #         documentation:
  #           summary: Create a new todo
  #           description: Create a new todo
  #           requestModels:
  #             'application/json': CreateTodoRequest
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:PutItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NEWSLETTER_TABLE}
  #     - Effect: Allow
  #       Action:
  #         - xray:PutTraceSegments
  #         - xray:PutTelemetryRecords
  #       Resource:
  #         - "*"

  # DeleteTodo:
  #   handler: src/lambda/http/deleteTodo.handler
  #   events:
  #     - http:
  #         method: delete
  #         path: todos/{todoId}
  #         cors: true
  #         authorizer: Auth
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:DeleteItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NEWSLETTER_TABLE}
  #     - Effect: Allow
  #       Action:
  #         - xray:PutTraceSegments
  #         - xray:PutTelemetryRecords
  #       Resource:
  #         - "*"

  # UpdateTodo:
  #   handler: src/lambda/http/updateTodo.handler
  #   events:
  #     - http:
  #         method: patch
  #         path: todos/{todoId}
  #         cors: true
  #         authorizer: Auth
  #         reqValidatorName: RequestBodyValidator
  #         documentation:
  #           summary: Update todo
  #           description: Updat todo
  #           requestModels:
  #             'application/json': UpdateTodoRequest
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:UpdateItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NEWSLETTER_TABLE}
  #     - Effect: Allow
  #       Action:
  #         - xray:PutTraceSegments
  #         - xray:PutTelemetryRecords
  #       Resource:
  #         - "*"

  # GenerateUploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos/{todoId}/attachment
  #         cors: true
  #         authorizer: Auth
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:UpdateItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NEWSLETTER_TABLE}
  #     - Effect: Allow
  #       Action:
  #         - s3:PutObject
  #       Resource: arn:aws:s3:::${self:provider.environment.ATTACH_S3_BUCKET}/*
  #     - Effect: Allow
  #       Action:
  #         - xray:PutTraceSegments
  #         - xray:PutTelemetryRecords
  #       Resource:
  #         - "*"

resources:
  Resources:
    # GatewayResponseDefault4XX:
    #   Type: AWS::ApiGateway::GatewayResponse
    #   Properties:
    #     ResponseParameters:
    #       gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    #       gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    #       gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
    #     ResponseType: DEFAULT_4XX
    #     RestApiId:
    #       Ref: ApiGatewayRestApi

    NewsletterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.NEWSLETTER_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: GSI
                KeyType: HASH
              - AttributeName: SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
    
    # RequestBodyValidator:
    #   Type: AWS::ApiGateway::RequestValidator
    #   Properties:
    #     Name: 'request-body-validator'
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    #     ValidateRequestBody: true
    #     ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACH_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACH_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket